"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const change_case_1 = require("change-case");
const css_mqpacker_1 = __importDefault(require("css-mqpacker"));
const merge_1 = __importDefault(require("lodash/merge"));
const path_1 = __importDefault(require("path"));
const perfectionist_1 = __importDefault(require("perfectionist"));
const plugin_error_1 = __importDefault(require("plugin-error"));
const postcss_1 = __importDefault(require("postcss"));
const through2_1 = __importDefault(require("through2"));
const vinyl_sourcemaps_apply_1 = __importDefault(require("vinyl-sourcemaps-apply"));
const media_queries_extract_1 = __importDefault(require("../postcss/media-queries-extract"));
/**
 * List media queries in CSS file.
 *
 * @param {File.BufferFile} file
 * @returns {postcss.LazyResult}
 * @private
 */
function _listMediaQueries(file) {
    file.mediaQueriesList = [];
    // Extract all media queries.
    return postcss_1.default([
        css_mqpacker_1.default(),
        media_queries_extract_1.default(),
        postcss_1.default.plugin("media-queries-list", () => {
            return (css) => {
                css.walkAtRules("media", (node) => {
                    file.mediaQueriesList.push(node.params);
                });
            };
        }),
    ]).process(file.contents.toString(), {
        from: file.path,
        to: file.path,
        // Generate a separate source map for gulp-sourcemaps
        map: file.sourceMap ? { annotation: false } : false,
    });
}
/**
 * Put media queries in different files.
 *
 * @param {File.BufferFile} file
 * @param {Transform} stream
 * @private
 */
function _splitMediaQueries(file, stream) {
    const extname = path_1.default.extname(file.basename);
    const basename = path_1.default.basename(file.basename, extname);
    for (const query of file.mediaQueriesList) {
        postcss_1.default([media_queries_extract_1.default({ query }), perfectionist_1.default({ indentSize: 2 })])
            .process(file.contents.toString(), {
            from: file.path,
            to: file.path,
            // Generate a separate source map for gulp-sourcemaps
            map: file.sourceMap ? { annotation: false } : false,
        })
            .then((result) => {
            const mediaFile = file.clone();
            const mediaBasename = basename + "." + change_case_1.paramCase(query) + extname;
            const mediaPath = path_1.default.join(path_1.default.dirname(mediaFile.path), mediaBasename);
            mediaFile.contents = Buffer.from(result.css);
            // Apply source map to the chain.
            if (mediaFile.sourceMap) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const map = result.map.toJSON();
                map.file = mediaFile.relative;
                map.sources = [].map.call(map.sources, (source) => path_1.default.join(path_1.default.dirname(mediaFile.relative), source));
                vinyl_sourcemaps_apply_1.default(mediaFile, map);
            }
            // Rename file.
            mediaFile.basename = mediaBasename;
            mediaFile.path = mediaPath;
            if (mediaFile.sourceMap) {
                mediaFile.sourceMap.file = mediaFile.relative;
            }
            // Save query in file for revision.
            mediaFile.revisionData = merge_1.default(mediaFile.revisionData || {}, { media: query });
            stream.push(mediaFile);
        });
    }
    delete file.mediaQueriesList;
}
/**
 * Extract media queries in different files.
 *
 * @returns {Transform}
 */
exports.default = () => {
    return through2_1.default.obj(function (file, encoding, cb) {
        if (file.isNull()) {
            return cb(null, file);
        }
        if (file.isStream()) {
            return cb(new plugin_error_1.default("media-queries-extractor", "Stream not supported"));
        }
        if (!file.contents) {
            return cb(null, file);
        }
        _listMediaQueries(file).then(() => {
            _splitMediaQueries(file, this);
            cb();
        });
    });
};
//# sourceMappingURL=media-queries-extractor.js.map