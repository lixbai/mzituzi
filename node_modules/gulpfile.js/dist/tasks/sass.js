"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const postcss_purgecss_1 = __importDefault(require("@fullhuman/postcss-purgecss"));
const autoprefixer_1 = __importDefault(require("autoprefixer"));
const css_mqpacker_1 = __importDefault(require("css-mqpacker"));
const cssnano_1 = __importDefault(require("cssnano"));
const fancy_log_1 = __importDefault(require("fancy-log"));
const fibers_1 = __importDefault(require("fibers"));
const gulp_clone_1 = __importDefault(require("gulp-clone"));
const gulp_postcss_1 = __importDefault(require("gulp-postcss"));
const gulp_rename_1 = __importDefault(require("gulp-rename"));
const gulp_sass_1 = __importDefault(require("gulp-sass"));
const gulp_sass_lint_1 = __importDefault(require("gulp-sass-lint"));
const gulp_sourcemaps_1 = __importDefault(require("gulp-sourcemaps"));
const merge_1 = __importDefault(require("lodash/merge"));
const merge_stream_1 = __importDefault(require("merge-stream"));
const path_1 = __importDefault(require("path"));
const perfectionist_1 = __importDefault(require("perfectionist"));
const postcss_assets_1 = __importDefault(require("postcss-assets"));
const postcss_discard_comments_1 = __importDefault(require("postcss-discard-comments"));
const postcss_discard_empty_1 = __importDefault(require("postcss-discard-empty"));
const postcss_inline_svg_1 = __importDefault(require("postcss-inline-svg"));
const postcss_svgo_1 = __importDefault(require("postcss-svgo"));
const purgecss_with_wordpress_1 = __importDefault(require("purgecss-with-wordpress"));
const rucksack_css_1 = __importDefault(require("rucksack-css"));
const sass_1 = __importDefault(require("sass"));
const sass_lint_1 = __importDefault(require("sass-lint"));
const sort_css_media_queries_1 = __importDefault(require("sort-css-media-queries"));
const through2_1 = __importDefault(require("through2"));
const media_queries_extractor_1 = __importDefault(require("../gulp-plugins/media-queries-extractor"));
const revision_1 = require("../gulp-plugins/revision");
const config_1 = __importDefault(require("../libs/config"));
const critical_clean_1 = __importDefault(require("../postcss/critical-clean"));
const critical_extract_1 = __importDefault(require("../postcss/critical-extract"));
const media_queries_clean_1 = __importDefault(require("../postcss/media-queries-clean"));
const normalize_revision_1 = __importDefault(require("../postcss/normalize-revision"));
const task_extended_1 = __importDefault(require("./task-extended"));
// eslint-disable-next-line @typescript-eslint/no-explicit-any
gulp_sass_1.default.compiler = sass_1.default;
/**
 * Build SASS files to CSS.
 */
class Sass extends task_extended_1.default {
    /**
     * Task constructor.
     *
     * @param {TaskOptions} options
     */
    constructor(options) {
        super(options);
        /**
         * Flag to define if critical rule is active.
         * @type {boolean}
         * @private
         * @readonly
         */
        this._criticalActive = false;
        /**
         * Flag to define if purgeCSS is active.
         * @type {boolean}
         * @private
         * @readonly
         */
        this._purgeCSSActive = false;
        // This task could build sourcemaps and sync browser with filter.
        this._gulpSourcemaps = true;
        this._browserSyncSettings = { match: "**/*.css" };
        this._minifySuffix = ".min";
        this._hideGzippedSize = false;
        const defaultSettings = {
            SVGO: {},
            assets: {
                cachebuster: revision_1.isActive(),
                relative: true,
            },
            autoprefixer: {
                grid: true,
            },
            critical: false,
            cssnano: {
                preset: [
                    "default",
                    {
                        cssDeclarationSorter: false,
                        svgo: false,
                    },
                ],
            },
            extractMQ: false,
            inlineSVG: {
                path: false,
            },
            mqpacker: {
                sort: "mobile",
            },
            purgeCSS: false,
            rucksack: {
                fallbacks: true,
            },
            sass: {
                fiber: fibers_1.default,
                outputStyle: "expanded",
            },
        };
        this._settings.settings = merge_1.default(defaultSettings, this._settings.settings || {});
        // Determine media queries order.
        this._settings.settings.mqpacker.sort =
            this._settings.settings.mqpacker.sort === "mobile" ? sort_css_media_queries_1.default : sort_css_media_queries_1.default.desktopFirst;
        // Settings to extract critical CSS.
        this._criticalActive =
            typeof this._settings.settings.critical === "object" ||
                (typeof this._settings.settings.critical === "boolean" && this._settings.settings.critical);
        this._settings.settings.critical =
            typeof this._settings.settings.critical === "object" ? this._settings.settings.critical : [];
        // Settings to purge CSS (preconfigured for WordPress).
        this._purgeCSSActive =
            typeof this._settings.settings.purgeCSS === "object" ||
                typeof this._settings.settings.purgeCSS === "string" ||
                (typeof this._settings.settings.purgeCSS === "boolean" && this._settings.settings.purgeCSS);
        const purgeCSSDefaultSettings = {
            content: ["**/*.html", "**/*.php", "**/*.twig"],
            css: ["**/*.css"],
            extractors: [],
            fontFace: true,
            keyframes: true,
            rejected: false,
            whitelist: purgecss_with_wordpress_1.default.whitelist,
            whitelistPatterns: purgecss_with_wordpress_1.default.whitelistPatterns,
            whitelistPatternsChildren: [],
        };
        if (typeof this._settings.settings.purgeCSS === "object") {
            this._settings.settings.purgeCSS = merge_1.default(purgeCSSDefaultSettings, {
                content: purgeCSSDefaultSettings.content,
                css: purgeCSSDefaultSettings.css,
            }, this._settings.settings.purgeCSS);
        }
        else if (typeof this._settings.settings.purgeCSS === "string") {
            this._settings.settings.purgeCSS = path_1.default.resolve(this._settings.cwd, this._settings.settings.purgeCSS);
        }
        else {
            this._settings.settings.purgeCSS = purgeCSSDefaultSettings;
        }
    }
    /**
     * Display error from SASS.
     *
     * @param {any} error
     * @protected
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _displayError(error) {
        const config = config_1.default.getInstance();
        fancy_log_1.default.error(sass_lint_1.default.format([
            {
                errorCount: 1,
                filePath: error.relativePath || path_1.default.relative(this._settings.cwd, error.file || error.path),
                messages: [
                    {
                        column: error.column,
                        line: error.line,
                        message: error.messageOriginal || error.message,
                        severity: 2,
                    },
                ],
                warningCount: 0,
            },
        ]));
        // Particular exit due to the comportment of Sass.
        if ((config.isLintRun() || config.isBuildRun()) && error.code !== "ENOENT") {
            process.exit(1);
        }
    }
    /**
     * Method to add specific steps for the build.
     *
     * @param {NodeJS.ReadableStream} stream
     * @return {NodeJS.ReadableStream}
     * @protected
     */
    _hookBuildBefore(stream) {
        const streams = [];
        const postCSSGlobal = [
            postcss_discard_comments_1.default(),
            postcss_discard_empty_1.default(),
            postcss_assets_1.default(this._settings.settings.assets),
            normalize_revision_1.default(),
            rucksack_css_1.default(this._settings.settings.rucksack),
            autoprefixer_1.default(this._settings.settings.autoprefixer),
            postcss_inline_svg_1.default(this._settings.settings.inlineSVG),
            postcss_svgo_1.default(this._settings.settings.SVGO),
        ];
        if (this._purgeCSSActive) {
            postCSSGlobal.push(postcss_purgecss_1.default(this._settings.settings.purgeCSS));
        }
        if (this._settings.sourcemaps) {
            stream = stream.pipe(gulp_sourcemaps_1.default.init());
        }
        // Propagate critical rules to children properties.
        let mainStream = stream
            .pipe(gulp_sass_1.default(this._settings.settings.sass || {}).on("error", gulp_sass_1.default.logError))
            .pipe(gulp_postcss_1.default(postCSSGlobal));
        // Extract critical rules.
        if (this._criticalActive) {
            const criticalStream = mainStream
                .pipe(gulp_clone_1.default())
                .pipe(gulp_postcss_1.default([critical_extract_1.default(), postcss_discard_empty_1.default()]))
                .pipe(gulp_rename_1.default({
                suffix: ".critical",
            }));
            // Add critical stream to stack.
            streams.push(criticalStream);
        }
        // Remove critical rules.
        mainStream = mainStream.pipe(gulp_postcss_1.default([critical_clean_1.default({ keepRules: !this._criticalActive })]));
        // Extract media queries.
        if (this._settings.settings.extractMQ) {
            const mediaQueriesStream = mainStream.pipe(gulp_clone_1.default()).pipe(media_queries_extractor_1.default());
            // Add media queries stream to stack.
            streams.push(mediaQueriesStream);
            // Remove media queries.
            mainStream = mainStream.pipe(gulp_postcss_1.default([media_queries_clean_1.default()]));
        }
        streams.unshift(mainStream);
        // Merge all streams and clean them.
        stream = merge_stream_1.default(streams).pipe(gulp_postcss_1.default([postcss_discard_empty_1.default(), perfectionist_1.default({ indentSize: 2 })]));
        // Generate minified file.
        const streamMin = stream
            .pipe(gulp_clone_1.default())
            .pipe(gulp_postcss_1.default([cssnano_1.default(this._settings.settings.cssnano), css_mqpacker_1.default(this._settings.settings.mqpacker)]))
            .pipe(gulp_rename_1.default({ suffix: this._minifySuffix }));
        let mergedStream = merge_stream_1.default(stream, streamMin);
        if (this._settings.sourcemaps) {
            mergedStream = mergedStream.pipe(gulp_sourcemaps_1.default.write(this._settings.sourcemapFiles));
        }
        return mergedStream;
    }
    /**
     * Method to add specific steps for the lint.
     *
     * @param {NodeJS.ReadWriteStream} stream
     * @param {TaskCallback} done
     * @return {NodeJS.ReadWriteStream}
     * @protected
     */
    _hookLint(stream, done) {
        return stream
            .pipe(gulp_sass_lint_1.default({ configFile: path_1.default.join(this._settings.cwd, ".sass-lint.yml") }))
            .pipe(gulp_sass_lint_1.default.format())
            .pipe(this._lintNotifier(done));
    }
    /**
     * Collect error from lint.
     *
     * @param {TaskCallback} done
     * @return {Transform}
     * @private
     */
    _lintNotifier(done) {
        const config = config_1.default.getInstance();
        return through2_1.default.obj((file, encoding, cb) => {
            if (!file.isNull() &&
                !file.isStream() &&
                file.sassLint.filter((error) => error.errorCount > 0).length > 0) {
                this._lintError = true;
                if (config.isLintRun()) {
                    for (const error of file.sassLint) {
                        if (error.errorCount > 0) {
                            task_extended_1.default.taskErrors.push({
                                taskName: this._taskName("lint"),
                                error,
                                done,
                            });
                        }
                    }
                }
            }
            cb();
        }, (cb) => cb());
    }
}
exports.default = Sass;
/**
 * Global task name.
 * @type {string}
 * @readonly
 */
Sass.taskName = "sass";
/**
 * Level to order task in execution pipeline.
 * @type {number}
 * @readonly
 */
Sass.taskOrder = 50;
//# sourceMappingURL=sass.js.map