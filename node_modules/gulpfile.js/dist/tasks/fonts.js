"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const change_case_1 = require("change-case");
const consolidate_1 = __importDefault(require("consolidate"));
const fs_1 = __importDefault(require("fs"));
const gulp_1 = require("gulp");
const gulp_file_1 = __importDefault(require("gulp-file"));
const gulp_iconfont_1 = __importDefault(require("gulp-iconfont"));
const merge_1 = __importDefault(require("lodash/merge"));
const path_1 = __importDefault(require("path"));
const vinyl_buffer_1 = __importDefault(require("vinyl-buffer"));
const revision_1 = require("../gulp-plugins/revision");
const task_extended_1 = __importDefault(require("./task-extended"));
/**
 * Build fonts based on SVG files.
 */
class Fonts extends task_extended_1.default {
    /**
     * Task constructor.
     *
     * @param {TaskOptions} options
     */
    constructor(options) {
        super(options);
        /**
         * Sanitize name of the task to use it in font name.
         * @type {string}
         * @private
         */
        this._sanitizedTaskName = "";
        /**
         * List of glyphs in current font.
         * @type {any[]}
         * @private
         */
        this._glyphs = [];
        const defaultSettings = {
            prefix: "font",
            template: "fontawesome",
        };
        this._settings.settings = merge_1.default(defaultSettings, this._settings.settings || {});
        const prefix = this._settings.settings.prefix === "" ? "" : `${this._settings.settings.prefix}-`;
        this._sanitizedTaskName = change_case_1.paramCase(this._taskName().replace("fonts:", prefix));
    }
    /**
     * Bind events to build tasks.
     * Generate and save a SASS files with all stuff to use this font and its glyphs.
     *
     * @param {NodeJS.ReadableStream} builder
     * @protected
     */
    _bindEventsToBuilder(builder) {
        builder.on("finish", () => {
            const file = path_1.default.resolve(__dirname, `../../src/templates/${this._settings.settings.template}.lodash`);
            // Load template file to build SASS file.
            fs_1.default.readFile(file, (err, data) => {
                if (err) {
                    throw err;
                }
                const taskName = this._taskName("build");
                // Get all variables used in template.
                const templateVars = {
                    className: this._sanitizedTaskName,
                    fontName: this._sanitizedTaskName,
                    fontPath: path_1.default.normalize(`${this._settings.settings.sass.rel}/`),
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    glyphs: this._glyphs.map((glyph) => ({
                        codepoint: glyph.unicode[0].charCodeAt(0),
                        name: glyph.name,
                    })),
                    hash: {
                        eot: revision_1.getHashRevision(taskName, `${this._sanitizedTaskName}.eot`),
                        svg: revision_1.getHashRevision(taskName, `${this._sanitizedTaskName}.svg`),
                        ttf: revision_1.getHashRevision(taskName, `${this._sanitizedTaskName}.ttf`),
                        woff: revision_1.getHashRevision(taskName, `${this._sanitizedTaskName}.woff`),
                        woff2: revision_1.getHashRevision(taskName, `${this._sanitizedTaskName}.woff2`),
                    },
                };
                // Generate and save SASS file.
                consolidate_1.default.lodash.render(data.toString(), templateVars).then((stylesheet) => {
                    stylesheet = `// sass-lint:disable-all\n\n${stylesheet}`;
                    gulp_file_1.default(`_${this._sanitizedTaskName}.scss`, stylesheet, { src: true }).pipe(gulp_1.dest(this._settings.settings.sass.dst, { cwd: this._settings.cwd }));
                });
            });
        });
    }
    /**
     * Method to add specific steps for the build.
     *
     * @param {NodeJS.ReadableStream} stream
     * @return {NodeJS.ReadableStream}
     * @protected
     */
    _hookBuildBefore(stream) {
        // Build font based on SVG files.
        return stream
            .pipe(gulp_iconfont_1.default({
            centerHorizontally: true,
            fontName: this._sanitizedTaskName,
            formats: ["ttf", "eot", "woff", "woff2", "svg"],
            normalize: true,
        }))
            .pipe(vinyl_buffer_1.default())
            .on("glyphs", (glyphs) => {
            this._glyphs = glyphs;
        });
    }
}
exports.default = Fonts;
/**
 * Global task name.
 * @type {string}
 * @readonly
 */
Fonts.taskName = "fonts";
/**
 * Level to order task in execution pipeline.
 * @type {number}
 * @readonly
 */
Fonts.taskOrder = 20;
//# sourceMappingURL=fonts.js.map