"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const browserify_1 = __importDefault(require("browserify"));
const fs_1 = __importDefault(require("fs"));
const ignore_1 = __importDefault(require("ignore"));
const merge_1 = __importDefault(require("lodash/merge"));
const omit_1 = __importDefault(require("lodash/omit"));
const path_1 = __importDefault(require("path"));
const browserify_2 = __importDefault(require("./browserify"));
/**
 * Build TypeScript files.
 */
class Typescript extends browserify_2.default {
    /**
     * Task constructor.
     *
     * @param {TaskOptions} options
     */
    constructor(options) {
        super(options);
        // Babel configuration for TypeScript.
        if (typeof this._settings.settings.babel === "undefined" ||
            (typeof this._settings.settings.babel === "object" && !this._settings.settings.babel.extensions)) {
            this._settings.settings.babel = merge_1.default(this._settings.settings.babel || {}, { extensions: [".ts", ".tsx"] });
        }
        // TypeScript configuration.
        if (typeof this._settings.settings.typescript === "string") {
            this._settings.settings.typescript = {
                project: this._settings.settings.typescript,
            };
        }
        // Determine name of the .eslintignore file.
        let esLintIgnoreFilename = path_1.default.resolve(this._settings.cwd, ".eslintignore");
        if (this._settings.settings.eslint.ignorePath) {
            esLintIgnoreFilename = path_1.default.isAbsolute(this._settings.settings.eslint.ignorePath)
                ? this._settings.settings.eslint.ignorePath
                : path_1.default.resolve(this._settings.cwd, this._settings.settings.eslint.ignorePath);
        }
        // Read ignore file.
        if (fs_1.default.existsSync(esLintIgnoreFilename)) {
            this._esLintIgnore = ignore_1.default().add(fs_1.default.readFileSync(esLintIgnoreFilename).toString());
        }
    }
    /**
     * Get bundler only with the necessary to treat TypeScript files.
     *
     * @returns {browserify.BrowserifyObject}
     * @protected
     */
    get bundlerOnly() {
        // Initialize Browserify bundler only.
        if (!this._bundlerOnly) {
            const browserifyOptions = omit_1.default(this._settings.settings, ["babel", "eslint", "typescript"]);
            this._bundlerOnly = browserify_1.default(browserifyOptions).plugin("tsify", this._settings.settings.typescript);
        }
        return this._bundlerOnly;
    }
    /**
     * Collect files used by bundler.
     *
     * @param {string} absolute
     * @param {string} relative
     * @protected
     */
    _collectFilesForLint(absolute, relative) {
        let ignored = true;
        if (!this._esLintIgnore) {
            this._bundleFiles.push(absolute);
        }
        else {
            try {
                ignored = this._esLintIgnore.ignores(relative);
            }
            catch (e) { }
            if (!ignored && this._bundleFiles.indexOf(absolute) < 0)
                this._bundleFiles.push(absolute);
        }
    }
}
exports.default = Typescript;
/**
 * Global task name.
 * @type {string}
 * @readonly
 */
Typescript.taskName = "typescript";
/**
 * Level to order task in execution pipeline.
 * @type {number}
 * @readonly
 */
Typescript.taskOrder = 40;
//# sourceMappingURL=typescript.js.map