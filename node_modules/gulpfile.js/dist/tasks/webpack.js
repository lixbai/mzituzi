"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eslint_1 = require("eslint");
const fancy_log_1 = __importDefault(require("fancy-log"));
const gulp_1 = require("gulp");
const gulp_rename_1 = __importDefault(require("gulp-rename"));
const merge_1 = __importDefault(require("lodash/merge"));
const omit_1 = __importDefault(require("lodash/omit"));
const path_1 = __importDefault(require("path"));
const vinyl_named_1 = __importDefault(require("vinyl-named"));
const webpack_1 = __importDefault(require("webpack"));
const webpack_stream_1 = __importDefault(require("webpack-stream"));
const javascript_1 = __importDefault(require("./javascript"));
/**
 * Package Javascript using Webpack.
 */
class Webpack extends javascript_1.default {
    /**
     * Task constructor.
     *
     * @param {TaskOptions} options
     */
    constructor(options) {
        super(options);
        let defaultSettings = {
            stats: "errors-only",
        };
        // Babel configuration for Webpack.
        if (this._settings.settings.babel !== false) {
            defaultSettings = merge_1.default(defaultSettings, {
                module: {
                    rules: [
                        {
                            exclude: /(node_modules|bower_components)/,
                            test: /\.m?js$/,
                            use: {
                                loader: "babel-loader",
                                options: this._settings.settings.babel,
                            },
                        },
                    ],
                },
            });
        }
        // Force some of settings.
        this._settings.settings = merge_1.default(defaultSettings, this._settings.settings, {
            mode: "production",
            optimization: {
                minimize: false,
            },
            watch: false,
        });
        if (this._settings.sourcemaps) {
            this._settings.settings.devtool = "inline-source-map";
        }
    }
    /**
     * Display errors from Webpack.
     *
     * @param {any} error
     * @protected
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _displayError(error) {
        const cliEngine = new eslint_1.CLIEngine({});
        const formatter = cliEngine.getFormatter("stylish");
        if (error.plugin === "webpack-stream") {
            // Message from webpack
            const formattedMessage = [
                {
                    errorCount: 1,
                    filePath: "",
                    fixableErrorCount: 0,
                    fixableWarningCount: 0,
                    messages: [
                        {
                            column: 0,
                            line: 0,
                            message: error.message,
                            nodeType: "",
                            ruleId: null,
                            severity: 2,
                            source: null,
                        },
                    ],
                    warningCount: 0,
                },
            ];
            fancy_log_1.default.error(formatter(formattedMessage));
        }
        else {
            super._displayError(error);
        }
    }
    /**
     * Method to add specific steps for the build.
     *
     * @param {NodeJS.ReadableStream} stream
     * @return {NodeJS.ReadableStream}
     * @protected
     */
    _hookBuildBefore(stream) {
        stream = stream
            .pipe(vinyl_named_1.default())
            .pipe(webpack_stream_1.default(omit_1.default(this._settings.settings, ["babel", "eslint"])), webpack_1.default // eslint-disable-line @typescript-eslint/no-explicit-any
        )
            .pipe(gulp_rename_1.default({
            basename: path_1.default.basename(this._settings.filename, path_1.default.extname(this._settings.filename)),
        }));
        stream = this._sourceMapsAndMinification(stream);
        return stream;
    }
    /**
     * Method to change default source for lint task.
     *
     * @returns {NodeJS.ReadableStream}
     * @protected
     */
    _hookLintSrc() {
        const srcLint = [
            ...(Array.isArray(this._settings.src) ? this._settings.src : [this._settings.src]),
            ...(this._settings.watch || []),
        ];
        return gulp_1.src(srcLint, { cwd: this._settings.cwd });
    }
}
exports.default = Webpack;
Webpack.runInParallel = false;
/**
 * Global task name.
 * @type {string}
 * @readonly
 */
Webpack.taskName = "webpack";
/**
 * Level to order task in execution pipeline.
 * @type {number}
 * @readonly
 */
Webpack.taskOrder = 40;
//# sourceMappingURL=webpack.js.map