"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const browser_sync_1 = __importDefault(require("browser-sync"));
const chalk_1 = __importDefault(require("chalk"));
const gulp_1 = require("gulp");
const merge_1 = __importDefault(require("lodash/merge"));
const through2_1 = __importDefault(require("through2"));
const config_1 = __importDefault(require("../libs/config"));
const task_simple_1 = __importDefault(require("./task-simple"));
/**
 * Use Browsersync to reload browser on file modification.
 */
class Browsersync extends task_simple_1.default {
    /**
     * Browsersync constructor.
     *
     * @param {TaskOptions} options
     */
    constructor(options) {
        super(options);
        /**
         * Real Browsersync instance.
         * @type {BrowserSyncInstance}
         * @private
         */
        this._browserSync = browser_sync_1.default.create();
        /**
         * Flag to know status of browsersync start.
         * @type {boolean}
         * @private
         */
        this._started = false;
        const defaultSetting = {
            open: false,
            ui: false,
        };
        this._settings.settings = merge_1.default(defaultSetting, this._settings.settings || {});
    }
    /**
     * Trigger sync.
     *
     * @param {string} taskName
     * @param {StreamOptions} settings
     * @return {NodeJS.ReadWriteStream}
     */
    sync(taskName, settings) {
        if (!this._started) {
            return through2_1.default.obj();
        }
        return this._browserSync.stream(settings || {});
    }
    /**
     * Start task.
     *
     * @param {TaskCallback} done
     * @protected
     */
    _start(done) {
        config_1.default.chdir(this._settings.cwd);
        // Initialize Browsersync.
        this._browserSync.init(this._settings.settings, () => {
            this._started = true;
            done();
        });
    }
    /**
     * Watch task.
     *
     * @param {TaskCallback} done
     * @protected
     */
    _watch(done) {
        gulp_1.watch(this._settings.watch || [], { cwd: this._settings.cwd }).on("change", (path) => {
            const coloredTaskName = chalk_1.default.blue(Browsersync.taskName);
            const coloredStatus = chalk_1.default.cyan("1 file changed");
            const coloredPath = chalk_1.default.magenta(path);
            console.log(`[${coloredTaskName}] ${coloredStatus} (${coloredPath})`);
            if (this._started) {
                this._browserSync.reload();
            }
            done();
        });
        done();
    }
}
exports.default = Browsersync;
/**
 * Global task name.
 * @type {string}
 * @readonly
 */
Browsersync.taskName = "browsersync";
/**
 * Level to order task in execution pipeline.
 * @type {number}
 * @readonly
 */
Browsersync.taskOrder = 60;
//# sourceMappingURL=browsersync.js.map