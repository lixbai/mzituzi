"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const eslint_1 = require("eslint");
const fancy_log_1 = __importDefault(require("fancy-log"));
const gulp_babel_1 = __importDefault(require("gulp-babel"));
const gulp_clone_1 = __importDefault(require("gulp-clone"));
const gulp_concat_1 = __importDefault(require("gulp-concat"));
const gulp_eslint_1 = __importDefault(require("gulp-eslint"));
const gulp_order_1 = __importDefault(require("gulp-order"));
const gulp_rename_1 = __importDefault(require("gulp-rename"));
const gulp_sourcemaps_1 = __importDefault(require("gulp-sourcemaps"));
const gulp_terser_1 = __importDefault(require("gulp-terser"));
const merge_1 = __importDefault(require("lodash/merge"));
const omit_1 = __importDefault(require("lodash/omit"));
const merge_stream_1 = __importDefault(require("merge-stream"));
const path_1 = __importDefault(require("path"));
const config_1 = __importDefault(require("../libs/config"));
const task_extended_1 = __importDefault(require("./task-extended"));
const sourcemap_extractor_1 = __importDefault(require("../gulp-plugins/sourcemap-extractor"));
/**
 * Concatenate Javascript files into one file. This file could be babelified.
 */
class Javascript extends task_extended_1.default {
    /**
     * Task constructor.
     *
     * @param {TaskOptions} options
     */
    constructor(options) {
        super(options);
        // This task sync browser with filter.
        this._browserSyncSettings = { match: "**/*.js" };
        this._minifySuffix = ".min";
        this._hideGzippedSize = false;
        this._settings.settings = this._settings.settings || {};
        // Babel configuration.
        if (typeof this._settings.settings.babel !== "undefined") {
            if (typeof this._settings.settings.babel === "object") {
                this._settings.settings.babel = merge_1.default(this.constructor._babelDefaultSettings, // eslint-disable-line @typescript-eslint/no-explicit-any
                this._settings.settings.babel);
                this._settings.settings.babel = omit_1.default(this._settings.settings.babel, ["_flags"]);
            }
            else if (typeof this._settings.settings.babel === "string") {
                this._settings.settings.babel = {
                    configFile: this._settings.settings.babel,
                };
            }
        }
        // ESLint configuration.
        if (typeof this._settings.settings.eslint !== "undefined") {
            if (typeof this._settings.settings.eslint === "object") {
                if (!this._settings.settings.eslint.cwd) {
                    this._settings.settings.eslint.cwd = this._settings.cwd;
                }
            }
            else if (typeof this._settings.settings.eslint === "string") {
                this._settings.settings.eslint = {
                    configFile: this._settings.settings.eslint,
                    cwd: this._settings.cwd,
                };
            }
        }
    }
    /**
     * Display error from Babel, Uglify or other modules used by this task.
     *
     * @param error
     * @protected
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _displayError(error) {
        const config = config_1.default.getInstance();
        const cliEngine = new eslint_1.CLIEngine({});
        const formatter = cliEngine.getFormatter("stylish");
        const relativeFile = path_1.default.relative(this._settings.cwd, error.fileName || "");
        let formattedMessage = [];
        if (error.cause) {
            // Message send by gulp-babel
            formattedMessage = [
                {
                    errorCount: 1,
                    filePath: relativeFile,
                    fixableErrorCount: 0,
                    fixableWarningCount: 0,
                    messages: [
                        {
                            column: error.cause.col,
                            line: error.cause.line,
                            message: error.cause.message,
                            nodeType: "",
                            ruleId: null,
                            severity: 2,
                            source: null,
                        },
                    ],
                    warningCount: 0,
                },
            ];
            // Particular exit due to the comportment of gulp-babel.
            if (config.isLintRun() || config.isBuildRun()) {
                fancy_log_1.default.error(formatter(formattedMessage));
                process.exit(1);
            }
        }
        else if (error.message && error.loc) {
            // Message send by gulp-terser or other
            formattedMessage = [
                {
                    errorCount: 1,
                    filePath: relativeFile,
                    fixableErrorCount: 0,
                    fixableWarningCount: 0,
                    messages: [
                        {
                            column: error.loc ? error.loc.column : 0,
                            line: error.loc ? error.loc.line : 0,
                            message: error.message.replace(error.fileName, relativeFile),
                            nodeType: "",
                            ruleId: null,
                            severity: 2,
                            source: null,
                        },
                    ],
                    warningCount: 0,
                },
            ];
            fancy_log_1.default.error(formatter(formattedMessage));
        }
    }
    /**
     * Flag current task with error to avoid build execution.
     *
     * @param {ESLintErrors} filesWithErrors
     * @param {TaskCallback} done
     * @protected
     */
    _esLintResults(filesWithErrors, done) {
        const config = config_1.default.getInstance();
        this._lintError = filesWithErrors.errorCount > 0;
        if (this._lintError && config.isLintRun()) {
            for (const error of filesWithErrors) {
                task_extended_1.default.taskErrors.push({
                    taskName: this._taskName("lint"),
                    error,
                    done,
                });
            }
        }
    }
    /**
     * Method to add specific steps for the build.
     *
     * @param {NodeJS.ReadableStream} stream
     * @return {NodeJS.ReadableStream}
     * @protected
     */
    _hookBuildBefore(stream) {
        stream = stream.pipe(gulp_order_1.default(this._settings.src));
        if (this._settings.sourcemaps) {
            stream = stream.pipe(gulp_sourcemaps_1.default.init());
        }
        if (this._settings.settings.babel !== false) {
            stream = stream.pipe(gulp_babel_1.default(this._settings.settings.babel));
        }
        stream = stream.pipe(gulp_concat_1.default(this._settings.filename));
        stream = this._minifyFiles(stream);
        if (this._settings.sourcemaps) {
            stream = stream.pipe(gulp_sourcemaps_1.default.write(this._settings.sourcemapFiles));
        }
        return stream;
    }
    /**
     * Method to add specific steps for the lint.
     *
     * @param {NodeJS.ReadWriteStream} stream
     * @param {TaskCallback} done
     * @return {NodeJS.ReadWriteStream}
     * @protected
     */
    _hookLint(stream, done) {
        return stream
            .pipe(gulp_eslint_1.default(this._settings.settings.eslint))
            .pipe(gulp_eslint_1.default.format())
            .pipe(gulp_eslint_1.default.results((filesWithErrors) => {
            this._esLintResults(filesWithErrors, done);
        }));
    }
    /**
     * Add minification to the stream to generate 2 files: normal and minified.
     *
     * @param {NodeJS.ReadableStream} stream
     * @returns {NodeJS.ReadableStream}
     * @protected
     */
    _minifyFiles(stream) {
        const streamMin = stream
            .pipe(gulp_clone_1.default())
            .pipe(gulp_terser_1.default({ output: { comments: false } }))
            .pipe(gulp_rename_1.default({ suffix: this._minifySuffix }));
        return merge_stream_1.default(stream, streamMin);
    }
    /**
     * Add sourcemap and minification to the stream.
     *
     * @param {NodeJS.ReadableStream} stream
     * @returns {NodeJS.ReadableStream}
     * @protected
     */
    _sourceMapsAndMinification(stream) {
        if (this._settings.sourcemaps) {
            stream = stream.pipe(sourcemap_extractor_1.default()).pipe(gulp_sourcemaps_1.default.init());
        }
        stream = this._minifyFiles(stream);
        if (this._settings.sourcemaps) {
            stream = stream.pipe(gulp_sourcemaps_1.default.write(this._settings.sourcemapFiles));
        }
        return stream;
    }
}
exports.default = Javascript;
/**
 * Global task name.
 * @type {string}
 * @readonly
 */
Javascript.taskName = "javascript";
/**
 * Level to order task in execution pipeline.
 * @type {number}
 * @readonly
 */
Javascript.taskOrder = 50;
/**
 * Default settings for babel.
 *
 * @type {{[name: string]: any}}
 * @protected
 * @readonly
 */
Javascript._babelDefaultSettings = {
    presets: ["@babel/preset-env"],
};
//# sourceMappingURL=javascript.js.map