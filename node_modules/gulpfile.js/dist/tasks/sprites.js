"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const change_case_1 = require("change-case");
const gulp_1 = require("gulp");
const gulp_header_1 = __importDefault(require("gulp-header"));
const gulp_sort_1 = __importDefault(require("gulp-sort"));
const gulp_spritesmith_1 = __importDefault(require("gulp.spritesmith"));
const merge_1 = __importDefault(require("lodash/merge"));
const omit_1 = __importDefault(require("lodash/omit"));
const minimatch_1 = __importDefault(require("minimatch"));
const path_1 = __importDefault(require("path"));
const vinyl_buffer_1 = __importDefault(require("vinyl-buffer"));
const task_extended_1 = __importDefault(require("./task-extended"));
/**
 * Convert a set of images into a spritesheet.
 */
class Sprites extends task_extended_1.default {
    /**
     * Task constructor.
     *
     * @param {TaskOptions} options
     */
    constructor(options) {
        super(options);
        // Merge normal and retina image.
        this._settings.src = this._srcGlobs();
        const defaultSettings = {
            prefix: "sprite",
        };
        this._settings.settings = merge_1.default(defaultSettings, this._settings.settings || {});
    }
    /**
     * Method to add specific steps for the build.
     *
     * @param {NodeJS.ReadableStream} stream
     * @return {NodeJS.ReadableStream}
     * @protected
     */
    _hookBuildBefore(stream) {
        const prefix = this._settings.settings.prefix === "" ? "" : `${this._settings.settings.prefix}-`;
        const sanitizedTaskName = change_case_1.paramCase(this._taskName().replace("sprites:", prefix));
        const imgName = sanitizedTaskName + ".png";
        const imgNameRetina = sanitizedTaskName + "@2x.png";
        // Normal spritesmith settings.
        const spritesmithDefaultSettings = {
            cssName: "_" + sanitizedTaskName + ".scss",
            cssSpritesheetName: "spritesheet-" + sanitizedTaskName,
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            cssVarMap: (spriteImg) => {
                spriteImg.name = `${sanitizedTaskName}-${spriteImg.name}`;
                if (this._settings["src-2x"]) {
                    const match = this._settings["src-2x"]
                        .map((pattern) => `**/${pattern}`.replace("//", "/"))
                        .reduce((acc, pattern) => acc || minimatch_1.default(spriteImg.source_image, pattern), false);
                    if (match) {
                        spriteImg.name += "-retina";
                    }
                }
            },
            imgName,
            imgPath: path_1.default.join(this._settings.settings.sass.rel, imgName),
            padding: 4,
        };
        let spritesmithSettings = merge_1.default(spritesmithDefaultSettings, omit_1.default(this._settings.settings, ["prefix", "sass"]));
        // Add retina treatment to settings.
        if (this._settings["src-1x"] && this._settings["src-2x"]) {
            spritesmithSettings = merge_1.default(spritesmithSettings, {
                cssRetinaGroupsName: `${sanitizedTaskName}-retina`,
                cssRetinaSpritesheetName: `spritesheet-${sanitizedTaskName}-retina`,
                retinaImgName: imgNameRetina,
                retinaImgPath: path_1.default.join(this._settings.settings.sass.rel, imgNameRetina),
                retinaSrcFilter: this._settings["src-2x"],
            });
        }
        // Sort file in certain condition to make that it's the same order in normal and retina sprites.
        if ((typeof this._settings.algorithm === "undefined" || this._settings.algorithm !== "binary-tree") &&
            typeof this._settings.algorithmOpts !== "undefined" &&
            this._settings.algorithmOpts.sort !== false) {
            stream = stream.pipe(gulp_sort_1.default());
        }
        const sprite = stream.pipe(gulp_spritesmith_1.default(spritesmithSettings));
        // Write SASS file
        sprite.css
            .pipe(gulp_header_1.default("// sass-lint:disable-all\n\n"))
            .pipe(gulp_1.dest(this._settings.settings.sass.dst, { cwd: this._settings.cwd }));
        return sprite.img.pipe(vinyl_buffer_1.default());
    }
    /**
     * Merge normal and retina sources.
     *
     * @return {string[]}
     * @private
     */
    _srcGlobs() {
        if (this._settings["src-1x"] && this._settings["src-2x"]) {
            return [...this._settings["src-1x"], ...this._settings["src-2x"]];
        }
        return this._settings.src;
    }
}
exports.default = Sprites;
/**
 * Global task name.
 * @readonly
 */
Sprites.taskName = "sprites";
/**
 * Level to order task in execution pipeline.
 * @type {number}
 * @readonly
 */
Sprites.taskOrder = 20;
//# sourceMappingURL=sprites.js.map