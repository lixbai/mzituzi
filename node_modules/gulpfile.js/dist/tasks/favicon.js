"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const gulp_real_favicon_1 = __importDefault(require("gulp-real-favicon"));
const merge_1 = __importDefault(require("lodash/merge"));
const path_1 = __importDefault(require("path"));
const revision_1 = require("../gulp-plugins/revision");
const task_extended_1 = __importDefault(require("./task-extended"));
/**
 * Get all needs for the favicon (different sizes, manifest... Based on https://realfavicongenerator.net).
 */
class Favicon extends task_extended_1.default {
    /**
     * Task constructor.
     *
     * @param {TaskOptions} options
     */
    constructor(options) {
        super(options);
        const defaultSettings = {
            design: {
                androidChrome: {
                    assets: {
                        legacyIcon: false,
                        lowResolutionIcons: false,
                    },
                    manifest: {
                        declared: true,
                        display: "standalone",
                        name: "",
                        onConflict: "override",
                        orientation: "notSet",
                    },
                    pictureAspect: "backgroundAndMargin",
                    themeColor: "#ffffff",
                },
                desktopBrowser: {},
                ios: {
                    assets: {
                        declareOnlyDefaultIcon: true,
                        ios6AndPriorIcons: false,
                        ios7AndLaterIcons: false,
                        precomposedIcons: false,
                    },
                    backgroundColor: "#ffffff",
                    margin: "18%",
                    pictureAspect: "backgroundAndMargin",
                },
                safariPinnedTab: {
                    pictureAspect: "silhouette",
                    themeColor: "#ffffff",
                },
                windows: {
                    assets: {
                        windows10Ie11EdgeTiles: {
                            big: true,
                            medium: true,
                            rectangle: false,
                            small: true,
                        },
                        windows80Ie10Tile: true,
                    },
                    backgroundColor: "#ffffff",
                    onConflict: "override",
                    pictureAspect: "noChange",
                },
            },
            iconsPath: "/",
            settings: {
                errorOnImageTooSmall: false,
                htmlCodeFile: false,
                readmeFile: false,
                scalingAlgorithm: "Mitchell",
                usePathAsIs: false,
            },
        };
        // 2 methods to define settings:
        // - simple: choose basic settings, there will be merged in all settings.
        // - complete: choose all settings used by https://realfavicongenerator.net
        if (this._settings.settings.name ||
            this._settings.settings.backgroundColor ||
            this._settings.settings.themeColor ||
            this._settings.settings.margin ||
            this._settings.settings.iconsPath) {
            this._settings.settings = merge_1.default(defaultSettings, {
                design: {
                    androidChrome: {
                        manifest: {
                            name: this._settings.settings.name || "",
                        },
                        themeColor: this._settings.settings.themeColor || "#ffffff",
                    },
                    ios: {
                        backgroundColor: this._settings.settings.backgroundColor || "#ffffff",
                        margin: this._settings.settings.margin || "18%",
                    },
                    safariPinnedTab: {
                        themeColor: this._settings.settings.themeColor || "#ffffff",
                    },
                    windows: {
                        backgroundColor: this._settings.settings.backgroundColor || "#ffffff",
                    },
                },
                iconsPath: this._settings.settings.iconsPath || "/",
            });
        }
        else {
            this._settings.settings = merge_1.default(defaultSettings, this._settings.settings || {});
        }
        this._settings.settings.masterPicture = path_1.default.resolve(this._settings.cwd, this._settings.src);
        this._settings.settings.dest = path_1.default.resolve(this._settings.cwd, this._settings.dst);
        this._settings.settings.markupFile = path_1.default.join(this._settings.dst, "favicon-data.json");
    }
    /**
     * Method to add specific steps for the build.
     *
     * @param {TaskCallback} done
     * @return {NodeJS.ReadableStream}
     * @protected
     */
    _hookOverrideBuild(done) {
        const taskName = this._taskName("build");
        gulp_real_favicon_1.default.generateFavicon(this._settings.settings, () => {
            const markupFile = path_1.default.resolve(this._settings.cwd, this._settings.settings.markupFile);
            fs_1.default.readFile(markupFile, (errorRead, data) => {
                if (errorRead) {
                    throw errorRead;
                }
                try {
                    const decodedData = JSON.parse(data.toString());
                    if (revision_1.isActive()) {
                        // Get generated files and manage revision.
                        const dir = decodedData.files_location.path;
                        for (const iconURL of decodedData.favicon.files_urls) {
                            const base = path_1.default.basename(iconURL);
                            const url = path_1.default.join(dir, base);
                            const fileName = path_1.default.resolve(this._settings.dst, base);
                            const rev = revision_1.getHashRevision(taskName, fileName);
                            // eslint-disable-next-line @typescript-eslint/camelcase
                            decodedData.favicon.html_code = decodedData.favicon.html_code.replace(url, `${url}?rev=${rev}`);
                        }
                        fs_1.default.writeFile(markupFile, JSON.stringify(decodedData, null, "  "), (errorWrite) => {
                            if (errorWrite) {
                                throw errorWrite;
                            }
                            // Update revision file.
                            revision_1.pushAndWrite(markupFile, {
                                taskName,
                                cwd: this._settings.cwd,
                                dst: this._settings.revision,
                            });
                        });
                    }
                    // Check for new version of favicon.
                    gulp_real_favicon_1.default.checkForUpdates(decodedData.version, (errorUpdate) => {
                        if (errorUpdate) {
                            throw errorUpdate;
                        }
                    });
                }
                catch (e) {
                    throw e;
                }
            });
            done();
        });
    }
}
exports.default = Favicon;
/**
 * Global task name.
 * @type {string}
 * @readonly
 */
Favicon.taskName = "favicon";
/**
 * Level to order task in execution pipeline.
 * @type {number}
 * @readonly
 */
Favicon.taskOrder = 20;
//# sourceMappingURL=favicon.js.map