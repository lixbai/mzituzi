"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fancy_log_1 = __importDefault(require("fancy-log"));
const fs_1 = __importDefault(require("fs"));
const yaml = __importStar(require("js-yaml"));
const isEmpty_1 = __importDefault(require("lodash/isEmpty"));
const merge_1 = __importDefault(require("lodash/merge"));
const minimist_1 = __importDefault(require("minimist"));
const path_1 = __importDefault(require("path"));
const process_1 = __importDefault(require("process"));
const utils_1 = require("./utils");
/**
 * Get configuration of the application from command line and settings file.
 */
class Config {
    constructor() {
        /**
         * Global options passed in command line.
         * @type {ParsedArgs}
         * @private
         */
        this._options = {
            _: [],
        };
        /**
         * All settings in YAML file that define tasks.
         * @type {Options}
         * @private
         */
        this._settings = {};
    }
    /**
     * Get name of the current run.
     *
     * @return {string}
     */
    get currentRun() {
        if (this.options._.length === 0) {
            return "default";
        }
        return this.options._[0];
    }
    /**
     * Get options.
     *
     * @return {ParsedArgs}
     */
    get options() {
        return this._options;
    }
    /**
     * Get settings.
     */
    get settings() {
        let settings = this._settings;
        // Keep only desired tasks.
        if (this.currentRun !== "default") {
            const { type, name } = utils_1.explodeTaskName(this.currentRun);
            settings = utils_1.filterObject(settings, (obj, key) => {
                const valid = type === "" || key === type;
                if (valid && name !== "") {
                    this._settings[key] = utils_1.filterObject(this._settings[key], (o, k) => k === name);
                }
                return valid;
            });
        }
        // Check "--no-{task}" arguments exists.
        settings = utils_1.filterObject(settings, (obj, key) => {
            return typeof this._options[key] === "undefined" || this._options[key];
        });
        return settings;
    }
    /**
     * Check if current run is a build run.
     *
     * @return {boolean}
     */
    isBuildRun() {
        return this._isIndentifiedRun("build");
    }
    /**
     * Check if a task is the current run.
     *
     * @param {string} taskName
     * @return {boolean}
     */
    isCurrentRun(taskName) {
        return this.currentRun === taskName;
    }
    /**
     * Check if current run is a lint run.
     *
     * @return {boolean}
     */
    isLintRun() {
        return this._isIndentifiedRun("lint");
    }
    /**
     * Identify a run.
     *
     * @param {string} run
     * @returns {boolean}
     * @private
     */
    _isIndentifiedRun(run) {
        return (this.currentRun !== "default" &&
            this.currentRun.lastIndexOf(run) >= 0 &&
            this.currentRun.lastIndexOf(run) === this.currentRun.length - run.length);
    }
    /**
     * Read options for application from command line.
     */
    _loadOptions() {
        // Merge default options with command line arguments
        this._options = minimist_1.default(process_1.default.argv.slice(2), {
            boolean: ["favicon", "lint", "sourcemaps", "sourcemapFiles"],
            string: ["configfile", "cwd", "env", "revision"],
            default: {
                configFile: process_1.default.env.CONFIG_FILE || "gulpconfig.yml",
                cwd: "",
                env: process_1.default.env.NODE_ENV || "production",
                favicon: true,
                lint: true,
                revision: false,
                sourcemaps: process_1.default.env.SOURCEMAPS || false,
                sourcemapFiles: process_1.default.env.SOURCEMAPS || false,
            },
            alias: {
                configFile: ["configfile", "config-file"],
                sourcemapFiles: ["sourcemap-files"],
            },
        });
        if (!path_1.default.isAbsolute(this._options.configFile)) {
            this._options.configFile = path_1.default.resolve(process_1.default.env.PWD || "", this._options.configFile);
        }
        // Read configuration file.
        this._readConfigFile();
        // Normalize current working directory.
        if (!this._options.cwd) {
            if (!this._settings.cwd) {
                this._options.cwd = path_1.default.dirname(this._options.configFile);
            }
            else if (!path_1.default.isAbsolute(this._settings.cwd)) {
                this._options.cwd = path_1.default.resolve(path_1.default.dirname(this._options.configFile), this._settings.cwd);
            }
            delete this._settings.cwd;
        }
        // Normalize sourcemaps settings.
        this._options.sourcemaps = this._options.sourcemaps || this._options.sourcemapFiles;
        this._options.sourcemapFiles = this._options.sourcemapFiles ? "." : undefined;
        // Get revision settings.
        if (!this._options.revision && this._settings.revision) {
            this._options.revision = this._settings.revision;
            delete this._settings.revision;
        }
        // Get sizes settings.
        if (!this._options.sizes) {
            const defaultSizes = {
                normal: true,
                gzipped: true,
            };
            if (typeof this._settings.sizes === "boolean") {
                this._settings.sizes = {
                    normal: this._settings.sizes,
                    gzipped: this._settings.sizes,
                };
            }
            else if (typeof this._settings.sizes === "object") {
                this._settings.sizes = merge_1.default(defaultSizes, this._settings.sizes);
            }
            else {
                this._settings.sizes = defaultSizes;
            }
            this._options.sizes = this._settings.sizes;
            delete this._settings.sizes;
        }
    }
    /**
     * Read settings from configuration file.
     */
    _loadSettings() {
        // Read configuration file.
        this._readConfigFile();
        // Merge global and local settings in each tasks.
        for (const name of utils_1.modules) {
            const settings = this._settings[name];
            if (settings && !settings.tasks) {
                settings.cwd = this._options.cwd;
            }
            else if (settings && settings.tasks) {
                for (const taskName of Object.keys(settings.tasks)) {
                    const task = settings.tasks[taskName];
                    task.settings = merge_1.default(settings.settings || {}, task.settings || {});
                    for (const option of ["cwd", "revision", "sizes", "sourcemaps", "sourcemapFiles"]) {
                        /* eslint-disable @typescript-eslint/no-explicit-any */
                        if (typeof task[option] === "undefined") {
                            task[option] = this._options[option];
                        }
                        /* eslint-enable @typescript-eslint/no-explicit-any */
                    }
                    settings[taskName] = task;
                }
                delete settings.tasks;
                delete settings.settings;
            }
        }
    }
    /**
     * Read configuration file.
     *
     * @returns {Options}
     * @private
     */
    _readConfigFile() {
        if (isEmpty_1.default(this._settings)) {
            // Read configuration file.
            try {
                this._settings = yaml.safeLoad(fs_1.default.readFileSync(this._options.configFile, "utf8"));
            }
            catch (e) {
                fancy_log_1.default.error(e.stack || String(e));
            }
        }
        return this._settings;
    }
    /**
     * Change the current working directory.
     *
     * @param directory
     */
    static chdir(directory) {
        try {
            process_1.default.chdir(directory);
        }
        catch (err) {
            fancy_log_1.default.error(`chdir: ${err}`);
        }
    }
    /**
     * Get Config instance.
     *
     * @return Unique instance of Config.
     */
    static getInstance() {
        if (!Config._instance) {
            fancy_log_1.default("Loading configuration file...");
            Config._instance = new Config();
            Config._instance._loadOptions();
            Config._instance._loadSettings();
            fancy_log_1.default("Configuration file loaded");
        }
        return Config._instance;
    }
}
exports.default = Config;
//# sourceMappingURL=config.js.map